buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war' 
apply plugin: 'jetty' 
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }

}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    compile 'org.springframework.data:spring-data-mongodb:1.8.2.RELEASE'
    
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    
    testCompile("junit:junit")
    
    //Apache Tika
    compile('org.apache.tika:tika-parsers:1.11')
    
    //crawler4j
    compile('edu.uci.ics:crawler4j:4.2')
    
    //Jackson
    compile('com.fasterxml:jackson-xml-databind:0.6.2')
    
    //Lucene(for stopword removal)
	compile('org.apache.lucene:lucene-core:3.6.2')
	compile('org.apache.lucene:lucene-analyzers:3.6.2')
	
	//Hadoop
	compile('org.apache.hadoop:hadoop-common:2.7.2')
	compile('org.apache.hadoop:hadoop-mapreduce-client-core:2.7.2')
	
	//Servlet and JSP
	compile 'javax.servlet:javax.servlet-api:3.0.1'
	compile('javax.servlet:jstl:1.2')
    
    //JSON
    compile('com.google.code.gson:gson:jar:2.2.2')

	
}

test {
    systemProperties 'property': 'value'
    testLogging.showStandardStreams = true
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}



task DataDump(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'web.crawler.controller.DataDump'
    
        // simple defensive programming to define optional arguments
    if (project.hasProperty("arguments")) {
        args arguments.split(" ")
    }
}

task Crawler(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'web.crawler.controller.Controller'
    
    // simple defensive programming to define optional arguments
    if (project.hasProperty("arguments")) {
        args arguments.split(" ")
    }
}


//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'web.crawler.controller.DataDump'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

